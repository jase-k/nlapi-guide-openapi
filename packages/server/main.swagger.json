{
  "openapi": "3.0.0",
  "info": {
    "title": "NLAPI Guide API",
    "version": "1.0.0",
    "description": "API documentation for NLAPI Guide"
  },
  "servers": [
    {
      "url": "http://localhost:3303"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Family": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Auto-generated ID"
          },
          "name": {
            "type": "string",
            "description": "Family name"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the family was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the family was last updated"
          }
        },
        "example": {
          "id": 1,
          "name": "The Tunes Family",
          "createdAt": "2023-01-01T00:00:00.000Z",
          "updatedAt": "2023-01-01T00:00:00.000Z"
        }
      },
      "Ingredient": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Auto-generated ID"
          },
          "name": {
            "type": "string",
            "description": "Name of the ingredient"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of creation",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time of last update",
            "format": "date-time"
          }
        },
        "example": {
          "id": 1,
          "name": "Tomato",
          "createdAt": "2024-01-01T00:00:00.000Z",
          "updatedAt": "2024-01-01T00:00:00.000Z"
        }
      },
      "IngredientInput": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the ingredient"
          }
        },
        "example": {
          "name": "Tomato"
        }
      },
      "NlapiInput": {
        "type": "object",
        "required": [
          "userInput"
        ],
        "properties": {
          "userInput": {
            "type": "string",
            "description": "The text string of the user's query."
          },
          "context": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Any context strings to pass to the NLAPI.",
            "nullable": true
          },
          "threadId": {
            "type": "string",
            "description": "The id of the conversation thread you wish to continue.",
            "nullable": true
          },
          "options": {
            "type": "object",
            "description": "Additional options to pass to the NLAPI.",
            "nullable": true
          }
        },
        "example": {
          "userInput": "What are the details of my profile?",
          "context": [
            "today is October 29, 2024"
          ],
          "threadId": "12345",
          "options": {
            "stream": "true"
          }
        }
      },
      "NlapiOutput": {
        "type": "object",
        "required": [
          "messages",
          "thread_id",
          "token_count",
          "run_id",
          "processing_time",
          "query_time",
          "total_time",
          "time_to_first_token",
          "endpoints_called"
        ],
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string",
                  "description": "The content of the message."
                },
                "speaker": {
                  "type": "string",
                  "description": "The speaker of the message."
                },
                "created_at": {
                  "type": "integer",
                  "description": "The timestamp of the message creation."
                }
              }
            }
          },
          "thread_id": {
            "type": "string",
            "description": "The id of the conversation thread."
          },
          "token_count": {
            "type": "integer",
            "description": "The number of tokens processed."
          },
          "run_id": {
            "type": "string",
            "description": "The id of the run."
          },
          "processing_time": {
            "type": "number",
            "format": "float",
            "description": "The time taken to process the request."
          },
          "query_time": {
            "type": "number",
            "format": "float",
            "description": "The time taken to query the data."
          },
          "total_time": {
            "type": "number",
            "format": "float",
            "description": "The total time taken for the request."
          },
          "time_to_first_token": {
            "type": "number",
            "format": "float",
            "description": "The time taken to generate the first token."
          },
          "endpoints_called": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "The API endpoint path."
                },
                "method": {
                  "type": "string",
                  "description": "The HTTP method used."
                },
                "body": {
                  "type": "string",
                  "nullable": true,
                  "description": "The request body."
                },
                "params": {
                  "type": "string",
                  "nullable": true,
                  "description": "The request parameters."
                },
                "response": {
                  "type": "object",
                  "properties": {
                    "response_status": {
                      "type": "integer",
                      "description": "The status code of the response."
                    },
                    "response": {
                      "type": "string",
                      "description": "The response body."
                    }
                  }
                },
                "processing_time": {
                  "type": "number",
                  "format": "float",
                  "description": "The time taken to process the endpoint call."
                }
              }
            }
          }
        },
        "example": {
          "messages": [
            {
              "content": "Here are some of your customers:\n\n1. **Dwight Schrute**\n   - Email: dwight@schrutefarms.com\n\n2. **Brian Halligan (Sample Contact)**\n   - Email: bh@hubspot.com\n\n3. **Dwight Schrute**\n   - Email: Not Available\n\n4. **Pam Beesely**\n   - Email: pam@dundermifflin.com\n\n5. **Dan Eppinga**\n   - Email: dan@dan.com\n\nIf you need more details or additional customers, feel free to ask!",
              "speaker": "bot",
              "created_at": 1731754598
            },
            {
              "content": "Who are my customers?",
              "speaker": "human",
              "created_at": 1731754593
            }
          ],
          "thread_id": "f5dfc1ee-e13f-4bdb-b0bd-39cca1f0077d",
          "token_count": 3743,
          "run_id": "05889cc1-8f58-44df-8122-12931a7380dc",
          "processing_time": 4.6399335861206055,
          "query_time": 0.27483630180358887,
          "total_time": 4.914769887924194,
          "time_to_first_token": 2.9380717277526855,
          "endpoints_called": [
            {
              "path": "/crm/v3/objects/contacts",
              "method": "GET",
              "body": null,
              "params": null,
              "response": {
                "response_status": 200,
                "response": "{\"results\":[{\"id\":\"67309815979\",\"properties\":{\"createdate\":\"2024-10-14T12:53:00.463Z\",\"email\":\"dwight@schrutefarms.com\",\"firstname\":\"Dwight\",\"hs_object_id\":\"67309815979\",\"lastmodifieddate\":\"2024-10-21T13:03:46.965Z\",\"lastname\":\"Schrute\"},\"createdAt\":\"2024-10-14T12:53:00.463Z\",\"updatedAt\":\"2024-10-21T13:03:46.965Z\",\"archived\":false},{\"id\":\"67331997020\",\"properties\":{\"createdate\":\"2024-10-14T12:52:03.512Z\",\"email\":\"bh@hubspot.com\",\"firstname\":\"Brian\",\"hs_object_id\":\"67331997020\",\"lastmodifieddate\":\"2024-10-14T12:52:33.801Z\",\"lastname\":\"Halligan (Sample Contact)\"},\"createdAt\":\"2024-10-14T12:52:03.512Z\",\"updatedAt\":\"2024-10-14T12:52:33.801Z\",\"archived\":false},{\"id\":\"69414294938\",\"properties\":{\"createdate\":\"2024-10-18T18:06:27.085Z\",\"email\":null,\"firstname\":\"Dwight\",\"hs_object_id\":\"69414294938\",\"lastmodifieddate\":\"2024-10-18T18:07:13.899Z\",\"lastname\":\"Schrute\"},\"createdAt\":\"2024-10-18T18:06:27.085Z\",\"updatedAt\":\"2024-10-18T18:07:13.899Z\",\"archived\":false},{\"id\":\"69942830102\",\"properties\":{\"createdate\":\"2024-10-21T00:49:01.097Z\",\"email\":\"pam@dundermifflin.com\",\"firstname\":\"Pam\",\"hs_object_id\":\"69942830102\",\"lastmodifieddate\":\"2024-10-21T01:05:11.712Z\",\"lastname\":\"Beesely\"},\"createdAt\":\"2024-10-21T00:49:01.097Z\",\"updatedAt\":\"2024-10-21T01:05:11.712Z\",\"archived\":false},{\"id\":\"72001711940\",\"properties\":{\"createdate\":\"2024-10-25T20:30:19.656Z\",\"email\":\"dan@dan.com\",\"firstname\":\"Dan\",\"hs_object_id\":\"72001711940\",\"lastmodifieddate\":\"2024-10-26T00:00:04.375Z\",\"lastname\":\"Eppinga\"},\"createdAt\":\"2024-10-25T20:30:19.656Z\",\"updatedAt\":\"2024-10-26T00:00:04.375Z\",\"archived\":false}]}"
              },
              "processing_time": 0.27483630180358887
            }
          ]
        }
      },
      "RecipeInput": {
        "type": "object",
        "required": [
          "title",
          "ingredients",
          "instructions"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the recipe"
          },
          "instructions": {
            "type": "string"
          },
          "recipeIngredients": {
            "type": "array",
            "description": "Ingredients required for the recipe",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/RecipeIngredientInputCreateIngredient"
                },
                {
                  "$ref": "#/components/schemas/RecipeIngredientInput"
                }
              ]
            }
          }
        },
        "example": {
          "title": "Spaghetti Bolognese",
          "recipeIngredients": [
            {
              "ingredientId": 1,
              "quantity": 2,
              "unitOfMeasure": "cups"
            },
            {
              "ingredient_name": "Tomato",
              "quantity": 200,
              "unitOfMeasure": "grams"
            }
          ],
          "instructions": "Cook spaghetti, prepare sauce, mix together"
        }
      },
      "Recipe": {
        "type": "object",
        "required": [
          "id",
          "title",
          "ingredients",
          "instructions"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Auto-generated ID"
          },
          "title": {
            "type": "string",
            "description": "Title of the recipe"
          },
          "instructions": {
            "type": "string",
            "description": "Cooking instructions"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of creation",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time of last update",
            "format": "date-time"
          }
        },
        "example": {
          "id": 1,
          "title": "Spaghetti Bolognese",
          "instructions": "Cook spaghetti, prepare sauce, mix together",
          "createdAt": "2024-01-01T00:00:00.000Z",
          "updatedAt": "2024-01-01T00:00:00.000Z"
        }
      },
      "RecipeFull": {
        "type": "object",
        "required": [
          "id",
          "title",
          "ingredients",
          "instructions"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Auto-generated ID"
          },
          "title": {
            "type": "string",
            "description": "Title of the recipe"
          },
          "recipeIngredients": {
            "type": "array",
            "description": "Ingredients required for the recipe",
            "items": {
              "$ref": "#/components/schemas/RecipeIngredient"
            }
          },
          "instructions": {
            "type": "string",
            "description": "Cooking instructions"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of creation",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time of last update",
            "format": "date-time"
          }
        },
        "example": {
          "id": 1,
          "title": "Spaghetti Bolognese",
          "recipeIngredients": [
            {
              "id": 1,
              "ingredient": {
                "id": 1,
                "name": "Tomato",
                "createdAt": "2024-01-01T00:00:00.000Z",
                "updatedAt": "2024-01-01T00:00:00.000Z"
              },
              "ingredientId": 1,
              "quantity": 200,
              "unitOfMeasure": "grams",
              "createdAt": "2024-01-01T00:00:00.000Z",
              "updatedAt": "2024-01-01T00:00:00.000Z"
            },
            {
              "id": 2,
              "ingredient": {
                "id": 2,
                "name": "Spaghetti",
                "createdAt": "2024-01-01T00:00:00.000Z",
                "updatedAt": "2024-01-01T00:00:00.000Z"
              },
              "ingredientId": 2,
              "quantity": 1,
              "unitOfMeasure": "cups",
              "createdAt": "2024-01-01T00:00:00.000Z",
              "updatedAt": "2024-01-01T00:00:00.000Z"
            }
          ],
          "instructions": "Cook spaghetti, prepare sauce, mix together"
        }
      },
      "RecipeIngredientInputCreateIngredient": {
        "type": "object",
        "required": [
          "recipeId",
          "ingredient_name",
          "quantity",
          "unitOfMeasure"
        ],
        "properties": {
          "recipeId": {
            "type": "integer",
            "description": "ID of the recipe"
          },
          "ingredient_name": {
            "type": "string",
            "description": "Name of the ingredient"
          },
          "quantity": {
            "type": "float",
            "description": "Quantity of the ingredient in the recipe"
          },
          "unitOfMeasure": {
            "type": "string",
            "description": "Unit of measure for the ingredient"
          }
        },
        "example": {
          "ingredient_name": "Tomato",
          "quantity": 200,
          "unitOfMeasure": "grams"
        }
      },
      "RecipeIngredientInput": {
        "type": "object",
        "required": [
          "recipeId",
          "ingredientId",
          "quantity",
          "unitOfMeasure"
        ],
        "properties": {
          "recipeId": {
            "type": "integer",
            "description": "ID of the recipe"
          },
          "ingredientId": {
            "type": "integer",
            "description": "ID of the ingredient"
          },
          "quantity": {
            "type": "float",
            "description": "Quantity of the ingredient in the recipe"
          },
          "unitOfMeasure": {
            "type": "string",
            "description": "Unit of measure for the ingredient"
          }
        },
        "example": {
          "ingredientId": 1,
          "quantity": 200,
          "unitOfMeasure": "grams"
        }
      },
      "RecipeIngredient": {
        "type": "object",
        "required": [
          "ingredient",
          "quantity",
          "unitOfMeasure",
          "recipeId"
        ],
        "properties": {
          "quantity": {
            "type": "string",
            "description": "Quantity of the ingredient in the recipe"
          },
          "unitOfMeasure": {
            "type": "string",
            "description": "Unit of measure for the ingredient"
          },
          "ingredient": {
            "$ref": "#/components/schemas/Ingredient"
          },
          "recipeId": {
            "type": "integer",
            "description": "ID of the recipe"
          },
          "ingredientId": {
            "type": "integer",
            "description": "ID of the ingredient"
          },
          "createdAt": {
            "type": "string",
            "description": "Date and time of creation",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date and time of last update",
            "format": "date-time"
          }
        },
        "example": {
          "quantity": 200,
          "unitOfMeasure": "g",
          "ingredient": {
            "id": 1,
            "name": "Tomato"
          },
          "recipeId": 1
        }
      },
      "UserPublic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Auto-generated ID"
          },
          "name": {
            "type": "string",
            "description": "User's name"
          },
          "familyId": {
            "type": "integer",
            "description": "ID of the family the user belongs to"
          },
          "email": {
            "type": "string",
            "description": "User's email"
          }
        }
      },
      "UserPrivate": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "Auto-generated ID"
          },
          "name": {
            "type": "string",
            "description": "User's name"
          },
          "email": {
            "type": "string",
            "description": "User's email"
          },
          "familyId": {
            "type": "integer",
            "description": "ID of the family the user belongs to"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was last updated"
          }
        },
        "example": {
          "id": 1,
          "name": "Bugs Bunny",
          "email": "bugs.bunny@example.com",
          "familyId": 1,
          "createdAt": "2023-01-01T00:00:00.000Z",
          "updatedAt": "2023-01-01T00:00:00.000Z"
        }
      },
      "UserRegister": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name"
          },
          "email": {
            "type": "string",
            "description": "User's email"
          },
          "password": {
            "type": "string",
            "description": "User's password"
          },
          "familyId": {
            "type": "integer",
            "description": "ID of the family the user belongs to"
          }
        },
        "example": {
          "name": "Bugs Bunny",
          "email": "bugs.bunny@example.com",
          "password": "CarrotLover123",
          "familyId": 1
        }
      },
      "UserLogin": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email"
          },
          "password": {
            "type": "string",
            "description": "User's password"
          }
        },
        "example": {
          "email": "bugs.bunny@example.com",
          "password": "CarrotLover123"
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/families": {
      "get": {
        "summary": "Retrieve a list of families",
        "tags": [
          "Family"
        ],
        "responses": {
          "200": {
            "description": "A list of families",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Family"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/families/{id}": {
      "get": {
        "summary": "Retrieve a single family by ID",
        "tags": [
          "Family"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The family ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A single family",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Family"
                }
              }
            }
          },
          "404": {
            "description": "Family not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/ingredients": {
      "post": {
        "summary": "Create a new ingredient",
        "tags": [
          "Ingredients"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IngredientInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ingredient created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ingredient"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          }
        }
      },
      "get": {
        "summary": "Get all ingredients",
        "tags": [
          "Ingredients"
        ],
        "responses": {
          "200": {
            "description": "A list of Ingredient objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ingredient"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/ingredients/search": {
      "get": {
        "summary": "Search ingredients",
        "tags": [
          "Ingredients"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The search query"
          },
          {
            "in": "query",
            "name": "searchBy",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "name"
              ]
            },
            "description": "The field to search by (default is 'name')"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 3
            },
            "description": "The maximum number of results to return"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of matching Ingredient objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ingredient"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid searchBy parameter"
          },
          "500": {
            "description": "Failed to search ingredients"
          }
        }
      }
    },
    "/api/nlapi": {
      "post": {
        "summary": "Send a request to the NLAPI",
        "tags": [
          "no-nlapi"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NlapiInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The response from the NLAPI",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NlapiOutput"
                }
              }
            }
          }
        }
      }
    },
    "/api/recipes": {
      "post": {
        "summary": "Create a new recipe",
        "tags": [
          "Recipes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipeInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Recipe created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Recipe"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          }
        }
      },
      "get": {
        "summary": "Get all recipes. Doesn't include ingredients. To get the recipe with ingredients, use /api/recipes/{id}",
        "tags": [
          "Recipes"
        ],
        "responses": {
          "200": {
            "description": "A list of Recipe objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Recipe"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/recipes/{id}": {
      "get": {
        "summary": "Get a single recipe by ID",
        "tags": [
          "Recipes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The recipe ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A single Recipe object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecipeFull"
                }
              }
            }
          },
          "404": {
            "description": "Recipe not found"
          }
        }
      },
      "put": {
        "summary": "Update a recipe",
        "tags": [
          "Recipes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The recipe ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecipeInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recipe updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Recipe"
                }
              }
            }
          },
          "404": {
            "description": "Recipe not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a recipe",
        "tags": [
          "Recipes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The recipe ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Recipe deleted successfully"
          },
          "404": {
            "description": "Recipe not found"
          }
        }
      }
    },
    "/api/recipes/search": {
      "get": {
        "summary": "Search recipes",
        "tags": [
          "Recipes"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The search query"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Recipe objects matching the search query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Recipe"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/session/register": {
      "post": {
        "summary": "Register a new user",
        "tags": [
          "Session",
          "no-nlapi"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegister"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/session/login": {
      "post": {
        "summary": "Login a user",
        "tags": [
          "Session",
          "no-nlapi"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "summary": "Retrieve a list of users",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserPublic"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/search": {
      "get": {
        "summary": "Fuzzy search users by name and email",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The search query"
          },
          {
            "in": "query",
            "name": "searchBy",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "email"
              ]
            },
            "required": false,
            "description": "The field to search by (default is name)"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "description": "The maximum number of results to return (default is 3)"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users matching the search criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserPublic"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/users/profile": {
      "get": {
        "summary": "Get own user information",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "User profile information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivate"
                }
              }
            }
          },
          "400": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "put": {
        "summary": "Update profile information",
        "tags": [
          "User"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPrivate"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "summary": "Retrieve a single user by ID",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The user ID"
          }
        ],
        "responses": {
          "200": {
            "description": "A single user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Ingredients",
      "description": "Ingredient management"
    },
    {
      "name": "Recipes",
      "description": "Recipe management"
    },
    {
      "name": "no-nlapi",
      "description": "Ignored by the NLAPI"
    },
    {
      "name": "Session",
      "description": "Session management"
    }
  ]
}